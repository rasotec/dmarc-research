from unittest import TestCase, main
from dmarc import parse_dmarc, DMARCRecord


def ov(tags: dict) -> DMARCRecord:
    t = {'v': 'DMARC1'}
    for k, v in tags.items():
        t[k] = v
    return DMARCRecord(t)


class Test(TestCase):
    def test_minimal(self):
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v =DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v= DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v = DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v  =DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=  DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v  =  DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v\t=DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=\tDMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v\t=\tDMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v \t=DMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v= \tDMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v \t= \tDMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v \t =\t \tDMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v \t \t  \t  \t\t\t \t  \t\t \t \t \t= \t \t \t \t \t \t \t \t\tDMARC1;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1 ;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1\t;p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1 ; p=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1\t; \tp=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v \t= \tDMARC1 \t\t; \t \tp=none'))
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1;p=none;'))

    def test_minimal_none(self):
        self.assertEqual(None, parse_dmarc(''))
        self.assertEqual(None, parse_dmarc('v='))
        self.assertEqual(None, parse_dmarc('v=DMARC1'))
        self.assertEqual(None, parse_dmarc('v=DMARC1;'))
        self.assertEqual(None, parse_dmarc('v=DMARC1'))
        self.assertEqual(None, parse_dmarc('v=DMARC1p=none'))
        self.assertEqual(None, parse_dmarc('v=DMARC1;p='))
        self.assertEqual(None, parse_dmarc('v=DMARC2;p=none'))
        self.assertEqual(None, parse_dmarc('v=DMARC;p=none'))
        self.assertEqual(None, parse_dmarc('v=DMARC1;v=none'))
        self.assertEqual(None, parse_dmarc('v=DMARC1;v=none;;'))

    def test_dmarc_request(self):
        self.assertEqual(ov({'p': 'none'}), parse_dmarc('v=DMARC1;p=none'))
        self.assertEqual(ov({'p': 'quarantine'}), parse_dmarc('v=DMARC1;p=quarantine'))
        self.assertEqual(ov({'p': 'reject'}), parse_dmarc('v=DMARC1;p=reject'))

    def test_dmarc_adkim(self):
        self.assertEqual(ov({'p': 'none', 'adkim': 'r'}), parse_dmarc('v=DMARC1;p=none;adkim=r'))
        self.assertEqual(ov({'p': 'none', 'adkim': 's'}), parse_dmarc('v=DMARC1;p=none;adkim=s'))
        self.assertEqual(ov({'p': 'none', 'adkim': 'a'}), parse_dmarc('v=DMARC1;p=none;adkim=a'))

    def test_invalid_any(self):
        self.assertEqual(None, parse_dmarc(''))
        self.assertEqual(None, parse_dmarc(';'))
        self.assertEqual(None, parse_dmarc('abc'))
        self.assertEqual(None, parse_dmarc('abc;def'))
        self.assertEqual(None, parse_dmarc('k=v'))
        self.assertEqual(None, parse_dmarc('k=v=v'))
        self.assertEqual(None, parse_dmarc('k1=v1;k2=v2'))
        self.assertEqual(None, parse_dmarc('k1=v1;k2=v1'))
        self.assertEqual(None, parse_dmarc('k=v1;k=v2'))
        self.assertEqual(None, parse_dmarc('  v  =   DMARC '))
        self.assertEqual(None, parse_dmarc('v=DMARC '))
        self.assertEqual(None, parse_dmarc('v= DMARC'))
        self.assertEqual(None, parse_dmarc('v=   DMARC'))
        self.assertEqual(None, parse_dmarc('v   =DMARC'))
        self.assertEqual(None, parse_dmarc('   v=DMARC'))
        self.assertEqual(None, parse_dmarc('\tv = \t DMARC \t   \t\t'))
        self.assertEqual(None, parse_dmarc('v=DMARC;'))
        self.assertEqual(None, parse_dmarc('v=DMARC;;'))
        self.assertEqual(None, parse_dmarc('v=DMARC;a=b'))
        self.assertEqual(None, parse_dmarc('v=DMARC; a=b'))
        self.assertEqual(None, parse_dmarc('v=DMARC; p=none'))
        self.assertEqual(None, parse_dmarc('a=b;\xa0c=d;'))
        self.assertEqual(None, parse_dmarc(' '))
        self.assertEqual(None, parse_dmarc('k=v; '))
        self.assertEqual(None, parse_dmarc(' k=v;'))
        self.assertEqual(None, parse_dmarc('k =v;'))
        self.assertEqual(None, parse_dmarc('k= v;'))
        self.assertEqual(None, parse_dmarc('k=v ;'))
        self.assertEqual(None, parse_dmarc(' k = v ;'))
        self.assertEqual(None, parse_dmarc('     k    =    v    ;'))
        self.assertEqual(None, parse_dmarc('\n'))
        self.assertEqual(None, parse_dmarc('\n '))
        self.assertEqual(None, parse_dmarc('\n\t'))
        self.assertEqual(None, parse_dmarc('\r'))
        self.assertEqual(None, parse_dmarc('\r '))
        self.assertEqual(None, parse_dmarc('\r\t'))
        self.assertEqual(None, parse_dmarc('\r\n'))
        self.assertEqual(None, parse_dmarc('\r\n '))
        self.assertEqual(None, parse_dmarc('k=v;\n'))
        self.assertEqual(None, parse_dmarc('k=v;\n '))
        self.assertEqual(None, parse_dmarc('k=v;\n\t'))
        self.assertEqual(None, parse_dmarc('k=v;\r'))
        self.assertEqual(None, parse_dmarc('k=v;\r '))
        self.assertEqual(None, parse_dmarc('k=v;\r\t'))
        self.assertEqual(None, parse_dmarc('k=v;\r\n'))
        self.assertEqual(None, parse_dmarc('k=v;\r\n '))
        self.assertEqual(None, parse_dmarc('k=v;\r\n\t'))
        self.assertEqual(None, parse_dmarc('\nk=v;'))
        self.assertEqual(None, parse_dmarc('k\n=v;'))
        self.assertEqual(None, parse_dmarc('k=\nv;'))
        self.assertEqual(None, parse_dmarc('k=v\n;'))
        self.assertEqual(None, parse_dmarc('\nk\n=\nv\n;'))
        self.assertEqual(None, parse_dmarc(''))
        self.assertEqual(None, parse_dmarc(';'))
        self.assertEqual(None, parse_dmarc(';a=b'))
        self.assertEqual(None, parse_dmarc(';a=b;'))
        self.assertEqual(None, parse_dmarc(';;'))
        self.assertEqual(None, parse_dmarc('k=v'))
        self.assertEqual(None, parse_dmarc('k=v;'))
        self.assertEqual(None, parse_dmarc('k=v;l=w'))
        self.assertEqual(None, parse_dmarc('k=v;l=w;'))
        self.assertEqual(None, parse_dmarc('k=v;;'))
        self.assertEqual(None, parse_dmarc('key=v'))
        self.assertEqual(None, parse_dmarc('k1=v'))
        self.assertEqual(None, parse_dmarc('k_=v'))
        self.assertEqual(None, parse_dmarc('k_1=v'))
        self.assertEqual(None, parse_dmarc('k_1a=v'))
        self.assertEqual(None, parse_dmarc('1=v'))
        self.assertEqual(None, parse_dmarc('1k=v'))
        self.assertEqual(None, parse_dmarc('_=v'))
        self.assertEqual(None, parse_dmarc('_k=v'))
        self.assertEqual(None, parse_dmarc('='))
        self.assertEqual(None, parse_dmarc('k='))
        self.assertEqual(None, parse_dmarc('=v'))
        self.assertEqual(None, parse_dmarc('k=v;='))
        self.assertEqual(None, parse_dmarc('k=v;k='))
        self.assertEqual(None, parse_dmarc('k=v;=v'))
        self.assertEqual(None, parse_dmarc('k=v=v'))


if __name__ == '__main__':
    main()
